D5
1. view - from django.contrib.auth.mixins import LoginRequiredMixin
   class ProductCreate(LoginRequiredMixin, CreateView):
      raise_exception = True

D5.2
2. Для начала добавим urls приложения, с которым ранее работали в этом модуле — “django.contrib.auth”.
Django скажет, как обрабатывать запросы от пользователей по ссылкам, которые начинаются с /accounts/.

project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
     path('admin/', admin.site.urls),
     path('accounts/', include('django.contrib.auth.urls')),
     path('products/', include('simpleapp.urls')),
]


3.project/settings.py

...

LOGIN_REDIRECT_URL = "/products"


4. Новое приложение для регистрации пользователей
python manage.py startapp accounts

5. accounts/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User


class SignUpForm(UserCreationForm):
    email = forms.EmailField(label="Email")
    first_name = forms.CharField(label="Имя")
    last_name = forms.CharField(label="Фамилия")

    class Meta:
        model = User
        fields = (
            "username",
            "first_name",
            "last_name",
            "email",
            "password1",
            "password2",
        )

6. accounts/views.py

from django.contrib.auth.models import User
from django.views.generic.edit import CreateView
from .forms import SignUpForm


class SignUp(CreateView):
    model = User
    form_class = SignUpForm
    success_url = '/accounts/login'
    template_name = 'registration/signup.html'


7.{% extends "flatpages/default.html" %}

{% block content %}

<form method="post">
{% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Sing up">
</form>

{% endblock %}


8. accounts/urls.py

from django.urls import path
from .views import SignUp

urlpatterns = [
    path('signup', SignUp.as_view(), name='signup'),
]


9. После чего подключим urls приложения accounts в главном приложении project. project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("accounts/", include("django.contrib.auth.urls")),
    path("accounts/", include("accounts.urls")),  # Добавили эту строчку
    path("products/", include("simpleapp.urls")),
]


10. pip install django-allauth

project/settings.py

# context_processors, скорее всего, у вас уже
# содержит 'django.template.context_processors.request'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` обязательно нужен этот процессор
                'django.template.context_processors.request',
            ],
        },
    },
]


# Этого раздела может не быть, добавьте его в указанном виде.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# В данный раздел добавьте 3 обязательных приложения allauth
# и одно, которое отвечает за выход через Yandex
INSTALLED_APPS = [
    ...
    'django.contrib.auth',
    'django.contrib.messages',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
]

# Ранее мы устанавливали значение для этой переменной,
# но всё равно убедитесь в её наличии.
SITE_ID = 1

11. python manage.py migrate

12. Authorization on mail
project/settings.py

...

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'


13. project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("accounts/", include("allauth.urls")),  # Оставили только allauth
    path("products/", include("simpleapp.urls")),
]


14. accounts/forms.py

from allauth.account.forms import SignupForm
from django.contrib.auth.models import Group


class CustomSignupForm(SignupForm):
    def save(self, request):
        user = super().save(request)
        common_users = Group.objects.get(name="common users")
        user.groups.add(common_users)
        return user

15. project/settings.py

...
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

16. simpleapp/view

from django.contrib.auth.mixins import PermissionRequiredMixin
....
class ProductCreate(PermissionRequiredMixin, CreateView):
    permission_required = ('simpleapp.add_product',)
    form_class = ProductForm
    model = Product
    template_name = 'product_edit.html'


class ProductUpdate(PermissionRequiredMixin, UpdateView):
    permission_required = ('simpleapp.change_product',)
    form_class = ProductForm
    model = Product
    template_name = 'product_edit.html'


class ProductDelete(PermissionRequiredMixin, DeleteView):
    permission_required = ('simpleapp.delete_product',)
    model = Product
    template_name = 'product_delete.html'
    success_url = reverse_lazy('product_list')


17. products.html

    {# Теперь будем проверять не request.user.is_authenticated, а конкретные права #}
    {% if perms.simpleapp.add_product %}
    <a href="{% url 'product_create' %}">Добавить товар</a>
    {% endif %}


18.